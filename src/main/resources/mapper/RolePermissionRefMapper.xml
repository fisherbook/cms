<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.stackoverflow.cms.dao.RolePermissionRefDAO">

    <resultMap type="net.stackoverflow.cms.model.entity.RolePermissionRef" id="baseMap">
        <result property="id" column="id" jdbcType="VARCHAR"/>
        <result property="roleId" column="role_id" jdbcType="VARCHAR"/>
        <result property="permissionId" column="permission_id" jdbcType="VARCHAR"/>
        <result property="ts" column="ts" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="where">
        <where>
            <if test="eqWrapper != null">
                <foreach collection="eqWrapper.entrySet()" index="column" item="value">
                    <if test="column != null and value != null">
                        and `${column}` = #{value}
                    </if>
                </foreach>
            </if>
            <if test="neqWrapper != null">
                <foreach collection="neqWrapper.entrySet()" index="column" item="value">
                    <if test="column != null and value != null">
                        and `${column}` != #{value}
                    </if>
                </foreach>
            </if>
            <if test="inWrapper != null">
                <foreach collection="inWrapper.entrySet()" index="column" item="values">
                    <if test="values != null and values.size() > 0">
                        and `${column}` in
                        <foreach collection="values" item="value" open="(" separator="," close=")">
                            #{value}
                        </foreach>
                    </if>
                </foreach>
            </if>
            <if test="ninWrapper != null">
                <foreach collection="ninWrapper.entrySet()" index="column" item="values">
                    <if test="values != null and values.size() > 0">
                        and `${column}` not in
                        <foreach collection="values" item="value" open="(" separator="," close=")">
                            #{value}
                        </foreach>
                    </if>
                </foreach>
            </if>
            <if test="keyWrapper != null and keyWrapper.size() > 0">
                <foreach collection="keyWrapper.entrySet()" index="key" item="columns">
                    <if test="columns != null and columns.size() > 0">
                        and
                        <foreach collection="columns" item="column" open="(" separator=" or " close=")">
                            `${column}` like CONCAT('%',#{key},'%')
                        </foreach>
                    </if>
                </foreach>
            </if>
        </where>
    </sql>

    <select id="countByCondition" resultType="int">
        select COUNT(*) from `role_permission_ref`
        <include refid="where"/>
    </select>

    <select id="select" resultMap="baseMap">
        select * from `role_permission_ref` where `id` = #{id}
    </select>

    <select id="selectByCondition" resultMap="baseMap">
        select * from `role_permission_ref`
        <include refid="where"/>
        <if test="sortWrapper != null and sortWrapper.size() > 0">
            order by
            <foreach collection="sortWrapper.entrySet()" index="k" item="v" separator=",">
                `${k}` ${v}
            </foreach>
        </if>
        <if test="offset != null and limit != null">
            limit ${offset}, ${limit}
        </if>
    </select>

    <insert id="insert">
        insert into `role_permission_ref`
        (`id`, `role_id`, `permission_id`, `ts`)
        values
        (#{id}, #{roleId}, #{permissionId}, #{ts})
    </insert>

    <insert id="batchInsert" parameterType="list">
        insert into `role_permission_ref`
        (`id`, `role_id`, `permission_id`, `ts`)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id}, #{item.roleId}, #{item.permissionId}, #{item.ts})
        </foreach>
    </insert>

    <delete id="delete" parameterType="string">
        delete from `role_permission_ref` where `id` = #{id}
    </delete>

    <delete id="batchDelete" parameterType="list">
        delete from `role_permission_ref` where `id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteByCondition">
        delete from `role_permission_ref`
        <include refid="where"/>
    </delete>

    <update id="update" parameterType="net.stackoverflow.cms.model.entity.RolePermissionRef">
        update `role_permission_ref`
        <set>
            <if test="roleId != null">
                `role_id` = #{roleId},
            </if>
            <if test="permissionId != null">
                `permission_id` = #{permissionId},
            </if>
            <if test="ts != null">
                `ts` = #{ts},
            </if>
        </set>
        where `id` = #{id}
    </update>

    <update id="batchUpdate" parameterType="list">
        <foreach collection="list" item="item" open="" close="" separator=";">
            update `role_permission_ref`
            <set>
                <if test="item.roleId != null">
                    `role_id` = #{item.roleId},
                </if>
                <if test="item.permissionId != null">
                    `permission_id` = #{item.permissionId},
                </if>
                <if test="item.ts != null">
                    `ts` = #{item.ts},
                </if>
            </set>
            where `id` = #{item.id}
        </foreach>
    </update>

    <update id="updateByCondition">
        update `role_permission_ref`
        <set>
            <if test="upWrapper != null">
                <if test="upWrapper.id != null">
                    `id` = #{upWrapper.id},
                </if>
                <if test="upWrapper.role_id != null">
                    `role_id` = #{upWrapper.role_id},
                </if>
                <if test="upWrapper.permission_id != null">
                    `permission_id` = #{upWrapper.permission_id},
                </if>
                <if test="upWrapper.ts != null">
                    `ts` = #{upWrapper.ts},
                </if>
            </if>
        </set>
        <include refid="where"/>
    </update>
</mapper>